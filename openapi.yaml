openapi: 3.0.3
info:
  title: Restaurant MERN API
  description: Full-stack restaurant website API with authentication, reservations, orders, and payments
  version: 1.0.0
  contact:
    name: Restaurant MERN Team
    email: support@restaurant-mern.com

servers:
  - url: http://localhost:5000/api/v1
    description: Local development server
  - url: https://restaurant-mern-backend.render.com/api/v1
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        phone:
          type: string
        role:
          type: string
          enum: [customer, admin]
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Dish:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
        category:
          type: string
          enum: [appetizer, main, dessert, beverage]
        image:
          type: string
          format: uri
        isVeg:
          type: boolean
        isAvailable:
          type: boolean
        ingredients:
          type: array
          items:
            type: string

    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object
        error:
          type: string

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
        error:
          type: string

paths:
  /health:
    get:
      summary: Health check endpoint
      tags: [System]
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /auth/register:
    post:
      summary: Register new user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, name]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
                name:
                  type: string
                  minLength: 2
                phone:
                  type: string
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Invalid input data
        '409':
          description: User already exists

  /auth/login:
    post:
      summary: Login user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
        '401':
          description: Invalid credentials

  /auth/logout:
    post:
      summary: Logout user
      tags: [Authentication]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful

  /dishes:
    get:
      summary: Get all dishes
      tags: [Dishes]
      parameters:
        - name: category
          in: query
          schema:
            type: string
            enum: [appetizer, main, dessert, beverage]
        - name: isVeg
          in: query
          schema:
            type: boolean
        - name: available
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: List of dishes
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dish'

  /reservations:
    get:
      summary: Get user reservations
      tags: [Reservations]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of reservations
    post:
      summary: Create new reservation
      tags: [Reservations]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [date, time, guests]
              properties:
                date:
                  type: string
                  format: date
                time:
                  type: string
                guests:
                  type: integer
                  minimum: 1
                  maximum: 20
                specialRequests:
                  type: string
      responses:
        '201':
          description: Reservation created successfully

  /orders:
    get:
      summary: Get user orders
      tags: [Orders]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of orders
    post:
      summary: Create new order
      tags: [Orders]
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Order created successfully

tags:
  - name: System
    description: System health and status
  - name: Authentication
    description: User authentication and authorization
  - name: Dishes
    description: Restaurant menu management
  - name: Reservations
    description: Table reservation management
  - name: Orders
    description: Food order management
  - name: Admin
    description: Administrative functions
