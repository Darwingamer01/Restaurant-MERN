name: 🚀 CI/CD Pipeline - Restaurant MERN

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  MONGODB_VERSION: '7.0'

jobs:
  # ===== BACKEND TESTING & BUILD =====
  backend-tests:
    name: 🏗️ Backend Tests & Build
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: ⚡ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install Dependencies
        run: |
          npm ci
          echo "✅ Dependencies installed successfully"

      - name: 🏗️ Build Shared Package
        run: |
          npm run build --workspace=packages/shared
          echo "✅ Shared package built successfully"

      - name: 🧪 Run Backend Tests
        run: npm test --workspace=apps/backend
        env:
          NODE_ENV: test
          MONGO_URI: mongodb://localhost:27017/restaurant-test
          JWT_SECRET: ${{ secrets.JWT_SECRET_TEST }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET_TEST }}

      - name: 📊 Upload Backend Test Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/backend/coverage/lcov.info
          flags: backend

      - name: 🏗️ Build Backend
        run: |
          npm run build --workspace=apps/backend
          echo "✅ Backend build completed successfully"

  # ===== FRONTEND TESTING & BUILD =====
  frontend-tests:
    name: 🎨 Frontend Tests & Build
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: ⚡ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install Dependencies
        run: |
          npm ci
          echo "✅ Dependencies installed successfully"

      - name: 🏗️ Build Shared Package
        run: |
          npm run build --workspace=packages/shared
          echo "✅ Shared package built successfully"

      - name: 🧪 Run Frontend Tests
        run: npm test --workspace=apps/frontend
        env:
          CI: true

      - name: 📊 Upload Frontend Test Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/frontend/coverage/lcov.info
          flags: frontend

      - name: 🏗️ Build Frontend for Production
        run: |
          npm run build --workspace=apps/frontend
          echo "✅ Frontend production build completed"
        env:
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL || 'http://localhost:5000/api/v1' }}

      - name: 📤 Upload Frontend Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: apps/frontend/dist/

  # ===== SECURITY & CODE QUALITY =====
  security-audit:
    name: 🔒 Security & Quality Checks
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: ⚡ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install Dependencies
        run: npm ci

      - name: 🔍 Run Security Audit
        run: |
          npm audit --audit-level=moderate
          echo "✅ Security audit completed"

      - name: 🔎 Run Dependency Check
        uses: actions/dependency-review-action@v3
        if: github.event_name == 'pull_request'

      - name: 📝 Run ESLint
        run: |
          npx eslint apps/backend/src --ext .ts,.js || true
          npx eslint apps/frontend/src --ext .ts,.tsx,.js,.jsx || true
          echo "✅ Linting completed"

  # ===== DEPLOYMENT NOTIFICATION =====
  deployment-ready:
    name: 🚀 Deployment Ready
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-audit]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 🎉 All Checks Passed
        run: |
          echo "🎉 All CI checks passed successfully!"
          echo "🚀 Code is ready for deployment to production"
          echo "📊 Backend tests: ✅ Passed"
          echo "📊 Frontend tests: ✅ Passed"
          echo "🔒 Security audit: ✅ Passed"
