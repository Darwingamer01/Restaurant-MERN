openapi: 3.0.3
info:
  title: Restaurant MERN API
  description: Complete API specification for Restaurant MERN application
  version: 1.0.0
  contact:
    name: Restaurant MERN Team
    email: support@restaurant-mern.com

servers:
  - url: http://localhost:5000/api/v1
    description: Development server
  - url: https://restaurant-mern-api.onrender.com/api/v1
    description: Production server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "507f1f77bcf86cd799439011"
        email:
          type: string
          format: email
          example: "user@example.com"
        name:
          type: string
          example: "John Doe"
        phone:
          type: string
          example: "+91 9876543210"
        role:
          type: string
          enum: [customer, admin]
          example: "customer"
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Dish:
      type: object
      properties:
        id:
          type: string
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          example: "Butter Chicken"
        description:
          type: string
          example: "Creamy tomato-based curry with tender chicken pieces"
        price:
          type: number
          example: 385
        category:
          type: string
          enum: [appetizer, main, dessert, beverage]
          example: "main"
        image:
          type: string
          format: uri
          example: "https://images.unsplash.com/photo-1588166524941-3bf61a9c41db"
        isVeg:
          type: boolean
          example: false
        isAvailable:
          type: boolean
          example: true
        ingredients:
          type: array
          items:
            type: string
          example: ["Chicken", "Tomatoes", "Cream"]
        preparationTime:
          type: number
          example: 30
        spiceLevel:
          type: string
          enum: [mild, medium, hot, very_hot]
          example: "mild"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object
        error:
          type: string
        errors:
          type: array
          items:
            type: object

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Login successful"
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            accessToken:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Check if the API is running and database is connected
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /auth/register:
    post:
      summary: Register new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  minLength: 6
                  example: "SecurePass123"
                name:
                  type: string
                  minLength: 2
                  example: "John Doe"
                phone:
                  type: string
                  example: "+91 9876543210"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
          headers:
            Set-Cookie:
              description: Refresh token cookie
              schema:
                type: string
                example: "refreshToken=eyJ...; HttpOnly; Secure; SameSite=Strict"
        '400':
          description: Validation error or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /auth/login:
    post:
      summary: User login
      description: Authenticate user and return tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  example: "SecurePass123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
          headers:
            Set-Cookie:
              description: Refresh token cookie
              schema:
                type: string
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /auth/refresh:
    post:
      summary: Refresh access token
      description: Get new access token using refresh token
      parameters:
        - in: cookie
          name: refreshToken
          required: true
          schema:
            type: string
          description: Refresh token cookie
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Token refreshed successfully"
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
          headers:
            Set-Cookie:
              description: New refresh token cookie
              schema:
                type: string
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /auth/logout:
    post:
      summary: User logout
      description: Logout user and invalidate tokens
      security:
        - BearerAuth: []
      parameters:
        - in: cookie
          name: refreshToken
          schema:
            type: string
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          headers:
            Set-Cookie:
              description: Clear refresh token cookie
              schema:
                type: string
                example: "refreshToken=; Max-Age=0"

  /auth/me:
    get:
      summary: Get current user
      description: Get current authenticated user information
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User information retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /dishes:
    get:
      summary: Get all dishes
      description: Retrieve all available dishes with filtering options
      parameters:
        - in: query
          name: category
          schema:
            type: string
            enum: [appetizer, main, dessert, beverage]
          description: Filter by dish category
        - in: query
          name: isVeg
          schema:
            type: boolean
          description: Filter vegetarian dishes
        - in: query
          name: isAvailable
          schema:
            type: boolean
            default: true
          description: Filter available dishes
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          description: Number of items per page
      responses:
        '200':
          description: Dishes retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      dishes:
                        type: array
                        items:
                          $ref: '#/components/schemas/Dish'
                      pagination:
                        type: object
                        properties:
                          page:
                            type: integer
                          limit:
                            type: integer
                          total:
                            type: integer
                          pages:
                            type: integer

    post:
      summary: Create new dish
      description: Create a new dish (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - description
                - price
                - category
                - image
                - isVeg
                - preparationTime
              properties:
                name:
                  type: string
                  example: "Butter Chicken"
                description:
                  type: string
                  example: "Creamy tomato-based curry"
                price:
                  type: number
                  example: 385
                category:
                  type: string
                  enum: [appetizer, main, dessert, beverage]
                image:
                  type: string
                  format: uri
                isVeg:
                  type: boolean
                ingredients:
                  type: array
                  items:
                    type: string
                preparationTime:
                  type: number
                spiceLevel:
                  type: string
                  enum: [mild, medium, hot, very_hot]
                  default: mild
      responses:
        '201':
          description: Dish created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      dish:
                        $ref: '#/components/schemas/Dish'
        '401':
          description: Unauthorized
        '403':
          description: Admin access required

  /dishes/{id}:
    get:
      summary: Get dish by ID
      description: Retrieve a specific dish by its ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Dish ID
      responses:
        '200':
          description: Dish retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      dish:
                        $ref: '#/components/schemas/Dish'
        '404':
          description: Dish not found

security:
  - BearerAuth: []

tags:
  - name: Authentication
    description: User authentication endpoints
  - name: Dishes
    description: Menu and dish management
  - name: Users
    description: User profile management
  - name: Reservations
    description: Table reservation system
  - name: Orders
    description: Food ordering system
  - name: Coupons
    description: Discount and coupon management
  - name: Reviews
    description: Review and rating system
