name: 🚀 CI/CD Pipeline - Restaurant MERN

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'

jobs:
  backend-tests:
    name: 🏗️ Backend Tests & Build
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: ⚡ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install Dependencies
        run: npm ci

      - name: 🏗️ Build Shared Package
        run: npm run build --workspace=packages/shared

      - name: 🧪 Run Backend Tests
        run: npm test --workspace=apps/backend
        env:
          NODE_ENV: test
          MONGO_URI: mongodb://127.0.0.1:27017/restaurant-test
          JWT_SECRET: test-jwt-secret-32-chars-long-for-ci-pipeline-security
          JWT_REFRESH_SECRET: test-refresh-secret-32-chars-long-for-ci-pipeline-security
          VITE_API_BASE_URL: http://localhost:5000/api/v1

      - name: 🏗️ Build Backend
        run: npm run build --workspace=apps/backend

  frontend-tests:
    name: 🎨 Frontend Build
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: ⚡ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install Dependencies
        run: npm ci

      - name: 🏗️ Build Shared Package
        run: npm run build --workspace=packages/shared

      - name: 🏗️ Build Frontend
        run: npm run build --workspace=apps/frontend
        env:
          VITE_API_BASE_URL: http://localhost:5000/api/v1

  deployment-ready:
    name: ✅ All Tests Passed
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: success()

    steps:
      - name: 🎉 Pipeline Success
        run: |
          echo "🎉 All CI checks passed successfully!"
          echo "🚀 Sprint 1 backend authentication system verified!"
          echo "✅ Ready for Sprint 2 development"
